<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>buildupchao | 各自努力 | 顶峰相见</title>
    <description>本站是buildupchao的技术分享博客。</description>
    <link>http://www.buildupchao.cn/</link>
    <atom:link href="http://www.buildupchao.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 08 Dec 2020 04:10:09 +0800</pubDate>
    <lastBuildDate>Tue, 08 Dec 2020 04:10:09 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Log4j2是如何切分日志的呢？</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://github.com/buildupchao/ImgStore/blob/master/Java/log4j2/Flume-Log4j2-split-log-logic-open.png?raw=true&quot; alt=&quot;log4j2日志切分流程图&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://www.buildupchao.cn/java/2020/12/07/how-log4j2-split-log.html</link>
        <guid isPermaLink="true">http://www.buildupchao.cn/java/2020/12/07/how-log4j2-split-log.html</guid>
        
        <category>java</category>
        
        <category>log4j2</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>没有Spring cron时该怎么定点执行定时任务？</title>
        <description>&lt;p&gt;最近有个小需求，在普通Java项目里面，不能借助于Spring，也不能使用复杂的jar，来实现cron定点定时任务。&lt;br /&gt;
通过查询资料，发现一个好用的工具：hutool&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-maven&quot; data-lang=&quot;maven&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/cn.hutool/hutool-cron --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;cn.hutool&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;hutool-cron&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.2.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;参考资料如下：&lt;a href=&quot;https://www.bookstack.cn/read/hutool/0f082d6e35363da6.md&quot; target=&quot;_blank&quot;&gt;https://www.bookstack.cn/read/hutool/0f082d6e35363da6.md&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;普通应用里面，只需引入这个简单的jar包，仅仅36KB，就可以方便快捷的实现cron方式执行任务。&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Mar 2020 00:00:00 +0800</pubDate>
        <link>http://www.buildupchao.cn/java/2020/03/17/normal-java-cron-task.html</link>
        <guid isPermaLink="true">http://www.buildupchao.cn/java/2020/03/17/normal-java-cron-task.html</guid>
        
        <category>java</category>
        
        <category>cron</category>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Flink的Watermark是如何治理数据乱序的？</title>
        <description>
</description>
        <pubDate>Thu, 16 Jan 2020 00:00:00 +0800</pubDate>
        <link>http://www.buildupchao.cn/flink/2020/01/16/deep-in-cep-and-watermark-for-flink.html</link>
        <guid isPermaLink="true">http://www.buildupchao.cn/flink/2020/01/16/deep-in-cep-and-watermark-for-flink.html</guid>
        
        <category>Flink</category>
        
        <category>大数据</category>
        
        
        <category>flink</category>
        
      </item>
    
      <item>
        <title>Flink Table API &amp; SQL</title>
        <description>&lt;h2 id=&quot;table-api--sql介绍&quot;&gt;Table API &amp;amp; SQL介绍&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Apache Flink具有两个关系API：表API和SQL，用于统一流和批处理。Table API是Scala和Java的语言集成查询API，查询允许组合关系运算符，例如过滤和连接。Flink SQL支持标准的SQL语法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Table API和SQL接口彼此集成，FLink的DataStream和DataSet API亦是如此。你可以轻松地基于API构建的所有API和库之间切换。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;注意，到目前最新版本位置，Table API和SQL还有很多功能正在开发中。并非[Table API, SQL]和[Stream, Batch]输入的每种组合都支持所有操作。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;1为什么需要table-api--sql&quot;&gt;1.为什么需要Table API &amp;amp; SQL&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Table API是一种关系型API，类SQL的API，用户可以像操作表一样地操作数据，非常的直观和方便。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SQL作为一个”人所皆知”的语言，如果一个引擎提供SQL，它将很容易被人们接受。这已经是业界很常见的现象。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Table &amp;amp; SQL API还有另外一个职责，就是流处理和批处理统一的API层。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2table-api--sql流处理概述&quot;&gt;2.Table API &amp;amp; SQL流处理概述&lt;/h3&gt;

&lt;p&gt;Flink的Table API和SQL支持是用于批处理和流处理的统一API。这意味着Table API和SQL查询具有相同的语义，无论它们的输入是有界批量输入还是无界流输入。因为关系代数（relational algebra）和SQL最初是为批处理而设计的，所以对于无界流输入的关系查询不像有界批输入上的关系查询那样容易理解。&lt;/p&gt;

&lt;h4 id=&quot;21流数据上的关系查询&quot;&gt;2.1.流数据上的关系查询&lt;/h4&gt;

&lt;p&gt;SQL和Relational algebra并没有考虑到流数据。因此，在关系代数（和SQL）和流处理之间有一些概念上的差距。
&lt;br /&gt;&lt;/p&gt;
&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;关系代数/SQL&lt;/th&gt;
            &lt;th&gt;流处理&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;关系（或表）是有界的（多）元组的集合&lt;/td&gt;
            &lt;td&gt;流式无界的元组序列&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;对批处理数据执行的查询（例如，关系数据库中的表）可以访问完整的输入数据&lt;/td&gt;
            &lt;td&gt;流式查询在启动时无法访问所有数据，必须等待流式传输数据&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;批处理查询在生成固定大小的结果后终止&lt;/td&gt;
            &lt;td&gt;流式查询会根据收到的记录不断更新其结果，并且永远不会完成&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;22动态表和连续查询&quot;&gt;2.2动态表和连续查询&lt;/h4&gt;

&lt;p&gt;动态表（Dynamic table）是Flink Table API和SQL支持流数据的核心概念。与表示批处理数据的静态表（static table）相比，动态表会随时间而变化，并且可以像静态批处理表一样查询。查询动态表会生成连续查询（Continuous Query）。连续查询永远不会终止并生成动态表作为结果。查询不断更新其结果以反映其输入表的更改。
&lt;br /&gt;
&lt;img src=&quot;https://github.com/buildupchao/ImgStore/blob/master/blog/flink/flink-foundation/dynamic-table-and-continuous-query-1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;23在流上定义表&quot;&gt;2.3在流上定义表&lt;/h4&gt;

&lt;p&gt;为了使用关系查询处理流，必须将其转换为表。从概念上将，流的每个记录都被解释为对结果表的INSERT修改。下图显示了点击事件流（左侧）如何转换为表（右侧）。随着更多的点击事件的插入，结果表不断增长。
&lt;br /&gt;
&lt;img src=&quot;https://github.com/buildupchao/ImgStore/blob/master/blog/flink/flink-foundation/dynamic-table-and-continuous-query-2.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;24连续查询&quot;&gt;2.4连续查询&lt;/h4&gt;

&lt;p&gt;在动态表上进行连续查询，并生成新的动态表。与批查询相反，连续查询不会停止更新其结果表。在任何时间点，连续查询的结果在语义上等同于在输入表的快照上以批处理模式执行的相同查询的结果。
&lt;br /&gt;
&lt;img src=&quot;https://github.com/buildupchao/ImgStore/blob/master/blog/flink/flink-foundation/dynamic-table-and-continuous-query-3.png?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;https://github.com/buildupchao/ImgStore/blob/master/blog/flink/flink-foundation/dynamic-table-and-continuous-query-4.png?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;25表转换到流&quot;&gt;2.5表转换到流&lt;/h4&gt;

&lt;p&gt;流查询的结果表将被动态更新，即，随着新纪录到达查询的输入流，它也发生变化。因此，将这样的动态查询转换成的DataStream需要对表的更新进行编码。
&lt;br /&gt;
将表转换为数据流有两种方式：
&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Append-only Mode：只有在动态Table仅通过INSERT更新修改时才能使用此模式，即它仅附加，并且以前发出的结果永远不会更新。如果更新或删除操作使用追加模式会失败报错。&lt;/li&gt;
  &lt;li&gt;Retract Mode：始终可以使用此模式。返回值是boolean类型。它用true或false来标记数据的插入或撤回，返回true代表数据插入，false代表数据的撤回。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/buildupchao/ImgStore/blob/master/blog/flink/flink-foundation/dynamic-table-and-continuous-query-5.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3flink-sql-connector&quot;&gt;3.Flink SQL Connector&lt;/h3&gt;

&lt;p&gt;Flink的表API和SQL程序可以连接到其他外部系统来读写批处理表和流表。&lt;br /&gt;
Table source提供对存储在外部系统（如数据库、键值存储、消息队列或文件系统）中的数据的访问。&lt;br /&gt;
Table Sink将表发送到外部存储系统。
&lt;br /&gt;
&lt;img src=&quot;https://github.com/buildupchao/ImgStore/blob/master/blog/flink/flink-foundation/dynamic-table-and-continuous-query-6.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4flink-table-api&quot;&gt;4.Flink Table API&lt;/h3&gt;

&lt;p&gt;Table API使用一个Scala和Java的语言集成查询API，是基于Table类。Table类代表了一个流或者批表，并提供方法来使用关系型操作。这些方法返回一个新的Table对象，这个新的Table对象代表着输入的Table应用关系型操作后的结果。
&lt;br /&gt;
&lt;a href=&quot;https://github.com/buildupchao/flink-examples/blob/master/src/main/java/com/buildupchao/flinkexamples/batch/api/BatchTableExample.java&quot;&gt;代码：批表案例&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&quot;https://github.com/buildupchao/flink-examples/blob/master/src/main/java/com/buildupchao/flinkexamples/stream/StreamTableApiAndSqlExample.java&quot;&gt;代码：流表案例&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5flink-sql&quot;&gt;5.Flink SQL&lt;/h3&gt;

&lt;p&gt;Flink SQL集成是基于Apache Calcite，Apache Calcite实现了标准的SQL。
&lt;br /&gt;
&lt;a href=&quot;https://github.com/buildupchao/flink-examples/blob/master/src/main/java/com/buildupchao/flinkexamples/batch/sql/BatchOrderCaseSQLExample.java&quot;&gt;代码：订单案例&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;资料快链&quot;&gt;资料快链&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/&quot;&gt;官网：Table API &amp;amp; SQL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ci.apache.org/projects/flink/flink-docs-release-1.9/dev/table/sql.html&quot;&gt;官网：Flink保留字列表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 13 Jan 2020 00:00:00 +0800</pubDate>
        <link>http://www.buildupchao.cn/flink/2020/01/13/flink-table-api-and-sql.html</link>
        <guid isPermaLink="true">http://www.buildupchao.cn/flink/2020/01/13/flink-table-api-and-sql.html</guid>
        
        <category>Flink</category>
        
        <category>大数据</category>
        
        
        <category>flink</category>
        
      </item>
    
      <item>
        <title>如何控制MySQL事务提交后，刷redo-log的策略？</title>
        <description>&lt;p&gt;既然涉及到事务提交，那么我们就是以&lt;code&gt;InnoDB&lt;/code&gt;来说明的。
&lt;br /&gt;&lt;br /&gt;
MySQL有一个参数，能够控制事务提交时，刷redo log的策略。该参数为：&lt;code&gt;innodb_flush_log_at_trx_commit&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/buildupchao/ImgStore/blob/master/blog/db/mysql-refresh-redo-log-1.png?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;策略1,&lt;code&gt;set global innodb_flush_log_at_trx_commit = 0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该方式可以获得最佳性能。&lt;br /&gt;
每隔1秒种，才将Log Buffer中的数据批量写入OS Cache，同时MySQL主动fsync。&lt;br /&gt;
&lt;strong style=&quot;color:red;&quot;&gt;这种策略，如果数据库崩溃，会有1秒的数据丢失。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;策略2,&lt;code&gt;set global innodb_flush_log_at_trx_commit = 1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该方式可以获得强一致性。&lt;br /&gt;
每次事务提交，都将Log Buffer中数据写入到OS Cache，同时MySQL主动fsync。&lt;br /&gt;
&lt;strong style=&quot;color:red;&quot;&gt;这种策略是InnoDB默认配置，是为了保证事务ACID特性。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;策略3,&lt;code&gt;set global innodb_flush_log_at_trx_commit = 2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该方式则是一种trade-off的结果。&lt;br /&gt;
每次事务提交，都将Log Buffer中的数据写入OS Cache；&lt;br /&gt;
每隔1秒，MySQL主动将OS Cache中数据批量fsync。&lt;br /&gt;
&lt;strong style=&quot;color:red;&quot;&gt;这种策略，如果操作系统崩溃，最多会有1秒的数据丢失。（磁盘IO次数是不确定的，因为OS的fsync的频率并不是MySQL能控制的；OS也会进行fsync，而MySQL主动fsync的周期是1秒，所以最多丢1秒数据）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
那么，透漏个小秘密，高并发业务场景下，最佳实践会如何配置呢？&lt;br /&gt;
&lt;strong style=&quot;color:green;&quot;&gt;答案是&lt;code&gt;set global innodb_flush_log_at_trx_commit = 2&lt;/code&gt;。因为不仅可以保证性能，也相对可以保障安全性（只要操作系统不出问题，数据就不会丢。而比起MySQL应用出问题，操作系统出问题概率小很多）&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 12 Jan 2020 00:00:00 +0800</pubDate>
        <link>http://www.buildupchao.cn/db/2020/01/12/how-to-set-mysql-fsync-redo-log-strategy.html</link>
        <guid isPermaLink="true">http://www.buildupchao.cn/db/2020/01/12/how-to-set-mysql-fsync-redo-log-strategy.html</guid>
        
        <category>redo-log</category>
        
        <category>MySQL</category>
        
        
        <category>db</category>
        
      </item>
    
      <item>
        <title>基于Flink的实时数仓案例资料（Flink Forward Asia 2019）</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/buildupchao/ImgStore/blob/master/blog/flink/real-time-dw/%E5%B0%8F%E7%B1%B3%E6%B5%81%E5%BC%8F%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E6%BC%94%E8%BF%9B%E4%B8%8E%E5%AE%9E%E8%B7%B5.pdf&quot;&gt;小米流式平台架构演进与实践&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/buildupchao/ImgStore/blob/master/blog/flink/real-time-dw/%E8%8F%9C%E9%B8%9F%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E8%BF%9B.pdf&quot;&gt;菜鸟实时数据技术架构的演进&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/buildupchao/ImgStore/blob/master/blog/flink/real-time-dw/OPPA%E5%9F%BA%E4%BA%8EApache%20Flink%E7%9A%84%E5%AE%9E%E6%97%B6%E6%95%B0%E4%BB%93%E5%AE%9E%E8%B7%B5.pdf&quot;&gt;OPPA基于Apache Flink的实时数仓实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;上述资料均来自于2019年Flink Forward Asia大会分享。&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Jan 2020 00:00:00 +0800</pubDate>
        <link>http://www.buildupchao.cn/flink/2020/01/05/real-time-datawarehouse-based-on-flink.html</link>
        <guid isPermaLink="true">http://www.buildupchao.cn/flink/2020/01/05/real-time-datawarehouse-based-on-flink.html</guid>
        
        <category>Flink</category>
        
        <category>大数据</category>
        
        
        <category>flink</category>
        
      </item>
    
      <item>
        <title>2020 Come On &amp; Flag</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://github.com/buildupchao/ImgStore/blob/master/blog/yearly-plan/2020-come-on.jpg?raw=true&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;回顾2019&quot;&gt;回顾2019&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;熟悉了数据仓库的整个脉络：从SDK数据上报 -&amp;gt; nginx入口 -&amp;gt; flume收集日志 -&amp;gt; ETL -&amp;gt; 计算 -&amp;gt; 数据服务及可视化&lt;/li&gt;
  &lt;li&gt;工作有变动，开始做ETL模块负责人，需要协调平衡技术、工作和学习了。&lt;/li&gt;
  &lt;li&gt;每月平均两篇博客输出（完成了80%，4月、9月因为太忙掉队了）&lt;/li&gt;
  &lt;li&gt;考研完成，预计有望成功进入北京大学#人工智能专业&lt;/li&gt;
  &lt;li&gt;很可惜健身因为平时工作和备考太忙，落下了。唯一的锻炼也就是每天上/班骑自行车20分钟了。&lt;/li&gt;
  &lt;li&gt;开源项目的话，很可惜，也没有花费过多精力去继续更新，实属遗憾。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这一年，是忙碌疯狂的一年。也有感觉快要崩溃的时候，也有兴奋不已的时候，也有满足于和同事技术分享/交谈的时候。还算可以，而这一年做的最大的事情就是考研了。
&lt;br /&gt;
这一年，有的朋友开始沦陷了，有的朋友开始准备转行工作，也有的已经成家立业。每个人的生活轨迹开始渐渐分离。
&lt;br /&gt;
这一年，经历了team的成员离职。从瑞哥、辉辉，可能还会有后续…
&lt;br /&gt;
19末尾，回顾过去，已经到了毕业工作三年的关卡，也即将面对自己的一次考验，不能按部就班，需要破陈出新，勇于展示自我。&lt;/p&gt;

&lt;h2 id=&quot;活力满满的2020&quot;&gt;活力满满的2020&lt;/h2&gt;

&lt;p&gt;按照惯例，新的一年里，flag还是要立的。&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;坚持每天早上7点起床，坚持练习口语。&lt;/li&gt;
  &lt;li&gt;坚持深耕大数据实时计算相关技术；其次，开始机器学习/深度学习相关算法研究。&lt;/li&gt;
  &lt;li&gt;坚持争取拿到最终北大offer。&lt;/li&gt;
  &lt;li&gt;继续博客内容输出，每月坚持高质量2篇输出。&lt;/li&gt;
  &lt;li&gt;开源项目源码的贡献，这个就随缘吧。不过，我觉得取决于个人对技术深入程度，决定是否可以贡献。&lt;/li&gt;
  &lt;li&gt;过完年就开始奔向26周岁了，要坚持每周锻炼身体。&lt;/li&gt;
  &lt;li&gt;继续存钱吧，也可以考虑给自己再换个Mac本了。&lt;/li&gt;
  &lt;li&gt;考虑考虑，是否要给自己重新入手一辆山地车了。自从丢了两辆山地车后，就买了辆普通城市自行车代步，还是更青睐山地车啊，哈哈哈。&lt;/li&gt;
  &lt;li&gt;国庆节出海旅游一次。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;想要的太多，就要付出更多的努力，才能保持价值平衡。
&lt;br /&gt;
希望年中回顾时，已经能够打卡一部分flag。
&lt;br /&gt;
2020，调整心态，继续战斗！&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
        <link>http://www.buildupchao.cn/yearlysummary/2020/01/01/come-on-new-year.html</link>
        <guid isPermaLink="true">http://www.buildupchao.cn/yearlysummary/2020/01/01/come-on-new-year.html</guid>
        
        <category>2020</category>
        
        <category>年度规划</category>
        
        
        <category>yearlysummary</category>
        
      </item>
    
      <item>
        <title>【技术挑战】Nacos自动刷新配置如何实现的？</title>
        <description>&lt;p&gt;&lt;strong&gt;技术挑战发展进度列表：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.buildupchao.cn/technology-challenge/2019/12/23/technology-challenge-for-3-weeks.html&quot;&gt;三周技术挑战约定之缘起&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.buildupchao.cn/technology-challenge/2019/12/26/how-to-refresh-conf-automatically-for-nacos.html&quot;&gt;【技术挑战】Nacos自动刷新配置如何实现的？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;blockquote&gt;
  &lt;p&gt;文章很长，请做好心理准备。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1nacos是什么&quot;&gt;1.Nacos是什么？&lt;/h2&gt;

&lt;p&gt;摘自Nacos官网：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nacos is committed to help you discover, configure, and manage your microservices. It provides a set of simple and useful features enabling you to realize dynamic service discovery, service configuration, service metadata and traffic management.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大意为：Nacos致力于帮助你发现、配置、管理微服务。Nacos提供了一系列简单易用的特性，它们可以帮助你实现动态服务发现、服务配置、服务元数据以及流量管理。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Key features of Nacos:
Service Discovery And Service Health Check
Dynamic configuration management
Dynamic DNS service
Service governance and metadata management&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大意为：Nacos的主要特性：服务发现和服务的健康检查，动态配置管理，动态DNS服务，服务治理和元数据管理。&lt;/p&gt;

&lt;p&gt;综上，我们大概可以知道Nacos是致力于动态服务发现、配置管理、服务元数据以及流量管理的平台。相比大多数人已经对这几个关键字耳熟能详了，就不做过多解释，详情可根据文章末尾资料链接前往官网查看。&lt;/p&gt;

&lt;h2 id=&quot;2开始邂逅nacos&quot;&gt;2.开始邂逅Nacos&lt;/h2&gt;

&lt;h3 id=&quot;21-初涉nacos&quot;&gt;2.1 初涉Nacos&lt;/h3&gt;

&lt;p&gt;为了方便测试，我们采用自构建jar包的方式使用Nacos&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从Github下载Nacos代码：http://github.com/alibaba/nacos.git&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git clone http://github.com/alibaba/nacos.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;打包下载好的nacos项目目录，执行编译打包命令（默认你已安装配置好Java环境和Maven环境）&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;your_clone_nacos_project_dir
mvn &lt;span class=&quot;nt&quot;&gt;-Prelease-nacos&lt;/span&gt; clean &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Dmaven&lt;/span&gt;.test.skip&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;打包完成，进入your_clone_nacos_project_dir/distribution/target/目录，会看到如下文件列表
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/nacos-jar.png?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;拷贝nacos-server-1.2.0-SNAPSHOT.tar.gz（xxx.zip包亦可）到你的服务器或者本地应用部署目录下然后解压缩&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;nacos-server-1.2.0-SNAPSHOT.tar.gz your_app_deploy_dir
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;your_app_deploy_dir
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-zxvf&lt;/span&gt; nacos-server-1.2.0-SNAPSHOT.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;解压后，目录如下：
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/nacos-server-dir.png?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;启动nacos-server，启动/关闭脚本在bin/目录下&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于nacos server的启动方式有两种：#1，采用单机模式，#2，集群模式。鉴于我们只是学习研究使用，无需采用集群模式（因为集群模式还需进行一系列配置），直接采用单机模式即可。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;sh startup.sh &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; standalone&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;启动后会看到如下信息：
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/start-nacos-server.png?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
然后查看日志是否有报错，有错误信息，一般很简单易解决，实在不懂可自行google或者咨询nacos管理员。&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/nacos-log-console-page.png?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/nacos-log-info.png?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;
此外，通过上图日志，我们可以知道nacos-server启动在8848端口（该端口我们后续会使用）。&lt;br /&gt;
其次，我们可以获取到另外两项信息：进程号以及Console控制台访问链接。
&lt;br /&gt;&lt;br /&gt;
接下来，我们先来体验下nacos动态配置功能：&lt;br /&gt;
首先，我们对nacos example模块代码中&lt;code&gt;com.alibaba.nacos.example&lt;/code&gt;包下的&lt;code&gt;ConfigExample&lt;/code&gt;进行修改并启动。&lt;br /&gt;
修改后代码如下所示，其中&lt;code&gt;TimeUnit.SECONDS.sleep(Integer.MAX_VALUE)&lt;/code&gt;代码是为了防止主线程退出而无法获取配置修改信息：&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;alibaba&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nacos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.concurrent.Executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.concurrent.TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.alibaba.nacos.api.NacosFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.alibaba.nacos.api.config.ConfigService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.alibaba.nacos.api.config.listener.Listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.alibaba.nacos.api.exception.NacosException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * Config service example
 *
 * @author Nacos
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigExample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NacosException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;DEFAULT_GROUP&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;serverAddr&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverAddr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ConfigService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NacosFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createConfigService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;got content: %s\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;configService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receiveConfigInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;time: %d, receive: %s\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Executor&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getExecutor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
控制台显示信息如下：
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-new-config-1.png?raw=true&quot; alt=&quot;deep-in-nacos-new-config-1&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
然后，登录nacos控制台，初始化默认账号/密码为：nacos/nacos，并新增一个配置信息。&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-new-config-2.png?raw=true&quot; alt=&quot;deep-in-nacos-new-config-2&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-new-config-3.png?raw=true&quot; alt=&quot;deep-in-nacos-new-config-3&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
我们将在控制台查看到获取到如下配置信息：
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-new-config-4.png?raw=true&quot; alt=&quot;deep-in-nacos-new-config-4&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
接下来，我们修改一次配置信息内容，并查看配置客户端listener是否可以获取到对应修改：
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-update-config-1.png?raw=true&quot; alt=&quot;deep-in-nacos-update-config-1&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-update-config-2.png?raw=true&quot; alt=&quot;deep-in-nacos-update-config-2&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
显然，客户端会获取到最新数据。到此为止，已经完成一个简单的动态配置管理功能（删除类似，不再敖述）。&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;21-小结&quot;&gt;2.1 小结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Nacos服务端保存配置信息&lt;/li&gt;
  &lt;li&gt;客户端连接到服务端之后，通过dataId和group获取具体的配置信息&lt;/li&gt;
  &lt;li&gt;当服务端配置信息发生变更时，客户端会收到通知&lt;/li&gt;
  &lt;li&gt;客户端拿到变更后的配置信息后，然后做相应处理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那客户端是如何感知到nacos服务端配置信息变更呢？也就是说，客户端和服务端的数据交互是如何实现的。而根据经验来说，通常是两种交互方式：#1,服务端主动推送数据；#2，客户端从服务端拉取数据。具体如何实现，我们下面开始逐渐深入了解。&lt;/p&gt;

&lt;h2 id=&quot;3从客户端潜入nacos实时更新配置原理&quot;&gt;&lt;span id=&quot;client-rt-load-config&quot;&gt;3.从客户端潜入Nacos实时更新配置原理&lt;/span&gt;&lt;/h2&gt;

&lt;h3 id=&quot;31-configfactory&quot;&gt;3.1 ConfigFactory&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;首先，在&lt;code&gt;ConfigExample&lt;/code&gt;代码中，我们首先看到通过&lt;code&gt;NacosFactory.createConfigService(properties)&lt;/code&gt;创建了一个&lt;code&gt;ConfigService&lt;/code&gt;，而&lt;code&gt;NacosFactory&lt;/code&gt;是个工厂类，底层调用了对应xxxFactory的createxxxService方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-client-1.png?raw=true&quot; alt=&quot;deep-in-nacos-for-client-1&quot; /&gt;
&lt;br /&gt;
可以看到实际上是调用了&lt;code&gt;ConfigFactory#createConfigService&lt;/code&gt;，通过反射调用了带有一个Properties参数的&lt;code&gt;NacosConfigService&lt;/code&gt;的构造方法来创建&lt;code&gt;ConfigService&lt;/code&gt;。而且，此处并没有对实例进行缓存也没有采用单例模式，每次调用均会创建一个&lt;code&gt;ConfigService&lt;/code&gt;实例。&lt;/p&gt;

&lt;h3 id=&quot;32-nacosconfigservice&quot;&gt;3.2 NacosConfigService&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;接下来，我们来查看nacos client模块下&lt;code&gt;com.alibaba.nacos.client.config&lt;/code&gt;包下的&lt;code&gt;NacosConfigService&lt;/code&gt;构造方法都做了些什么工作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-client-2.png?raw=true&quot; alt=&quot;deep-in-nacos-for-client-2&quot; /&gt;
&lt;br /&gt;
由上图可知，&lt;code&gt;NacosConfigService&lt;/code&gt;构造方法除去初始化命名空间，主要是做了两件事：&lt;br /&gt;
（1）采用装饰器模式，将ServerHttpAgent实例包装成MetricsHttpAgent对象&lt;br /&gt;
（2）实例化ClientWorker
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;321-metricshttpagent和serverhttpagent&quot;&gt;3.2.1 MetricsHttpAgent和ServerHttpAgent&lt;/h4&gt;

&lt;p&gt;MetricsHttpAgent和ServerHttpAgent均实现了&lt;code&gt;HttpAgent&lt;/code&gt;接口。针对上述的agent，MetricsHttpAgent只是对ServerHttpAgent进行了包装，增加了一些耗时统计操作，实际上工作的类是ServerHttpAgent。而ServerHttpAgent构造方法中主要是初始化了&lt;code&gt;ServerListManager&lt;/code&gt;用于获取nacos-server地址信息和初始化其他属性（encode、aksk、maxRetry）。
&lt;br /&gt;&lt;br /&gt;
此外，agent作为参数传入ClientWorker构造方法，之后在ClientWorker中发挥作用。&lt;/p&gt;

&lt;h4 id=&quot;322-clientworker&quot;&gt;3.2.2 ClientWorker&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-client-3.png?raw=true&quot; alt=&quot;deep-in-nacos-for-client-3&quot; /&gt;
&lt;br /&gt;
从上述代码可以看到，&lt;code&gt;ClientWorker&lt;/code&gt;构造方法中，除了将&lt;code&gt;HttpAgent&lt;/code&gt;和&lt;code&gt;ConfigFilterChainManager&lt;/code&gt;维持在自己内部，还初始化了两个线程池：&lt;br /&gt;
（1）第1个线程池是只拥有一个线程且用于定时执行任务。每间隔10ms执行一次&lt;code&gt;checkConfigInfo()&lt;/code&gt;方法，用于检查配置信息&lt;br /&gt;
（2）第2个线程池是用于长轮询的普通线程池（并未采用定时功能）。
&lt;br /&gt;&lt;br /&gt;
接下来，我们来查看下&lt;code&gt;checkConfigInfo()&lt;/code&gt;方法内部实现：&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-client-4.png?raw=true&quot; alt=&quot;deep-in-nacos-for-client-4&quot; /&gt;
&lt;br /&gt;
可以看出，&lt;code&gt;checkConfigInfo()&lt;/code&gt;会取出来一部分任务，通过&lt;code&gt;executorService&lt;/code&gt;线程池去执行&lt;code&gt;LongPollingRunnable&lt;/code&gt;任务，且每个任务有一个taskId，&lt;code&gt;LongPollingRunnable&lt;/code&gt;中会根据taskId获取&lt;code&gt;CacheData&lt;/code&gt;。
&lt;br /&gt;&lt;br /&gt;
接下来，我们看一下&lt;code&gt;LongPollingRunnable&lt;/code&gt;内部实现：&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LongPollingRunnable&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LongPollingRunnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;taskId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheDatas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inInitializingCacheList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// check failover config&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTaskId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cacheDatas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;checkLocalConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isUseLocalConfigInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkListenerMd5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;LOGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;get local config info error&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// check server config&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changedGroupKeys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkUpdateDataIds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheDatas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inInitializingCacheList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changedGroupKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GroupKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tenant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;tenant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getServerConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tenant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;CacheData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GroupKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKeyTenant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tenant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;LOGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[{}] [data-received] dataId={}, group={}, tenant={}, md5={}, content={}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tenant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMd5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;ContentUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;truncateContent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NacosException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;&quot;[%s] [get-update] get changed config exception. dataId=%s, group=%s, tenant=%s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tenant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;LOGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CacheData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheDatas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isInitializing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inInitializingCacheList&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GroupKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getKeyTenant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dataId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tenant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkListenerMd5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cacheData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setInitializing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;inInitializingCacheList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;executorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// If the rotation training task is abnormal, the next execution time of the task will be punished&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;LOGGER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;longPolling error : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;executorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskPenaltyTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
由代码可以看出，主要分为两部分内容：#1，检查本地配置信息（check failover config）；#2，获取到服务端配置信息并更新到本地（check server config）
&lt;br /&gt;&lt;br /&gt;
（1）检查本地配置信息（check failover config）&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;首先，根据taskId获取到&lt;code&gt;CacheData&lt;/code&gt;，然后对&lt;code&gt;CacheData&lt;/code&gt;进行检查，主要是进行本地配置检查和监听器的md5检查。其中，本地检查主要是做一个故障容错，当服务端挂掉时，Nacos客户端可以从本地文件系统获取相关配置信息。而Nacos配置信息存储在如下目录中：&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-client-5.png?raw=true&quot; alt=&quot;deep-in-nacos-for-client-5&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;（2）检查服务端配置信息（check server config）&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-client-6.png?raw=true&quot; alt=&quot;deep-in-nacos-for-client-6&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
首先，通过调用&lt;code&gt;checkUpdateDataIds(cacheDatas, inInitializingCacheList)&lt;/code&gt;方法，从Server获取值变化了的DataID列表。&lt;br /&gt;
然后，通过调用&lt;code&gt;getServerConfig(dataId, group, tenant, 3000L)&lt;/code&gt;方法，从Server获取最新的配置信息且把最新的配置信息保存到&lt;code&gt;CacheData&lt;/code&gt;中。&lt;strong style=&quot;color:red;&quot;&gt;而&lt;code&gt;CacheData#setContent&lt;/code&gt;中不仅会保存最新配置信息，还会更新该&lt;code&gt;CacheData&lt;/code&gt;的md5值。&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-client-10.png?raw=true&quot; alt=&quot;deep-in-nacos-for-client-10&quot; /&gt;
&lt;br /&gt;
最后，调用&lt;code&gt;cacheData.checkListenerMd5()&lt;/code&gt;方法（既然上面更新了md5值，那么这里进行check也就不足为奇了）。&lt;br /&gt;
此外，任务最后又重新提交了本任务 &lt;code&gt;executorService.execute(this);&lt;/code&gt;。
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;到此，我们就已经完成了&lt;code&gt;ConfigService&lt;/code&gt;的创建，接下来就可以为该&lt;code&gt;ConfigService&lt;/code&gt;添加一个&lt;code&gt;Listener&lt;/code&gt;。&lt;code&gt;ConfigService#addListener&lt;/code&gt;底层是调用了 &lt;code&gt;ClientWorker#addTenantListeners&lt;/code&gt;方法。
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-client-7.png?raw=true&quot; alt=&quot;deep-in-nacos-for-client-7&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-client-8.png?raw=true&quot; alt=&quot;deep-in-nacos-for-client-8&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-client-9.png?raw=true&quot; alt=&quot;deep-in-nacos-for-client-9&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
由此观察，&lt;code&gt;ClientWorker#addTenantListeners&lt;/code&gt;方法主要做了两件事：#1，根据dataId、group和tenant去获取&lt;code&gt;CacheData&lt;/code&gt;对象；#2，将当前要添加的&lt;code&gt;Listener&lt;/code&gt;对象添加到&lt;code&gt;CacheData&lt;/code&gt;中（即&lt;code&gt;CacheData&lt;/code&gt;持有&lt;code&gt;Listener&lt;/code&gt;，所以可以回调&lt;code&gt;Listener#receiveConfigInfo&lt;/code&gt;方法）。另外，&lt;code&gt;CacheData#addListener&lt;/code&gt;方法中会将listener与CacheData的md5属性值一起作为参数构建&lt;code&gt;ManagerListenerWrap&lt;/code&gt;对象并存储到&lt;code&gt;CacheData&lt;/code&gt;的listeners列表。
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-client-11.png?raw=true&quot; alt=&quot;deep-in-nacos-for-client-11&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
现在，我们已经大概了解了&lt;code&gt;ConfigService&lt;/code&gt;，但是，还要一个问题待解决：&lt;code&gt;Listener&lt;/code&gt;的回调方法&lt;code&gt;receiveConfigInfo&lt;/code&gt;是在哪里被调用的？动脑子想想啊，既然要回调，肯定是检测到配置信息有变动了啊，那检测在哪里发生的？答案显而易见，没错，就是&lt;code&gt;CacheData#checkListenerMd5&lt;/code&gt;。So cool，让我们开始从&lt;code&gt;LongPollingRunnable#run&lt;/code&gt; -&amp;gt; &lt;code&gt;CacheData#checkListenerMd5&lt;/code&gt;，checkListenerMd5代码如下：
&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkListenerMd5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ManagerListenerWrap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listeners&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastCallMd5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;safeNotifyListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;
通过代码可知，checkListenerMd5方法会检查&lt;code&gt;CacheData&lt;/code&gt;当前的md5值与&lt;code&gt;CacheData&lt;/code&gt;所持有的listener中保存的md5值是否一致，如果不一致，那么就会调用safeNotifyListener。看名字，应该是通知Listener的使用者，该Listener所监听的配置信息发生了变更。接下来，还是让我们看看safeNatofyListener代码，再得出最终结论吧（主要关注3行代码，完整详细代码请自行阅读源码）:
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-client-12.png?raw=true&quot; alt=&quot;deep-in-nacos-for-client-12&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
如上，safeNatifyListener主要的三个步骤：#1，获取最新的配置信息；#2，调用Listener#receiveConfigInfo回调方法；#3，最后更新listenerWrap的md5值。Yahho~果然如此，长轮询内进行md5值比对后会决定是否触发回调。
&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;33-小结&quot;&gt;3.3 小结&lt;/h3&gt;

&lt;p&gt;到此为止，从客户端对配置中心的完整流程已经分析关闭，我们做一个小结：&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Nacos服务端创建一个配置后，客户端可对此配置信息进行监听;&lt;/li&gt;
  &lt;li&gt;客户端通过定时任务每间隔10ms来检查配置信息是否变更;&lt;/li&gt;
  &lt;li&gt;服务端配置信息发生变更，客户端将会获取到变更的数据，并将新的配置数据更新到CacheData中，并计算CacheData的新的md5属性值;&lt;/li&gt;
  &lt;li&gt;比较CacheData的新的md5值是否和所持有的listeners的md5值一致，不一致，则回调listener的receiveConfigInfo方法并更新listenerWrap的md5值;&lt;/li&gt;
  &lt;li&gt;其中，出于对服务端故障的考虑，客户端会将最新数据获取后会保存在本地的snapshot文件中，在此之后会优先从本地文件中获取配置信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;4从服务端潜入nacos实时更新配置原理&quot;&gt;4.从服务端潜入Nacos实时更新配置原理&lt;/h2&gt;

&lt;h3 id=&quot;41-configservletinner--clientlongpolling&quot;&gt;4.1 ConfigServletInner &amp;amp;&amp;amp; ClientLongPolling&lt;/h3&gt;

&lt;p&gt;我们从哪里作为切入点进行分析呢？还记得&lt;code&gt;ClientWorker#checkUpdateDataIds&lt;/code&gt;方法吧，里面会去请求调用Nacos服务端API来获取值变化了的DataID列表。所以，我们可以轻易从&lt;code&gt;ClientWorker#checkUpdateDataIds&lt;/code&gt; -&amp;gt; &lt;code&gt;ClientWorker#checkUpdateConfigStr&lt;/code&gt; -&amp;gt; &lt;code&gt;HttpResult result = agent.httpPost(Constants.CONFIG_CONTROLLER_PATH + &quot;/listener&quot;, headers, params, agent.getEncode(), readTimeoutMs);&lt;/code&gt;，到此，我们可以得出客户端通过http请求的服务端API为&lt;code&gt;v1/cs/configs/listener&lt;/code&gt;。我们直接从通过IDEA的双击Shift键进行快速查询定位该API所在位置，要记得当前是POST请求而不是GET请求哦。
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-1.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-1&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
然后，我们可以定位到nacos config模块下&lt;code&gt;com.alibaba.nacos.config.server.controller.ConfigController#listener&lt;/code&gt;方法，通过注释知道该API是用于比较MD5的。其中，通过对httpervletRequest参数进行解析转换后，交给inner对象去做长轮询。
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-2.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-2&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
接下来，我们看一下&lt;code&gt;inner.doPollingConfig(request, response, clientMd5Map, probeModify.length())&lt;/code&gt;内部主要做了什么呢？其中，该 inner 对象是&lt;code&gt;com.alibaba.nacos.config.server.controller.ConfigServletInner&lt;/code&gt;。
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-3.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-3&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
通过查看&lt;code&gt;ConfigServletInner#doPollingConfig&lt;/code&gt;不仅支持长轮询，也支持短轮询的逻辑。在此，我们只看长轮询部分。
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-4.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-4&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
我们会发现&lt;code&gt;LongPollingService#addLongPollingClient&lt;/code&gt;中最后一行代码是把客户端的长轮询请求封装成一个&lt;code&gt;ClientLongPolling&lt;/code&gt;对象提交给&lt;code&gt;scheduler&lt;/code&gt;去异步执行。
&lt;br /&gt;
但是，有个问题：&lt;strong style=&quot;color:red;&quot;&gt;服务端拿到客户端指定的超时时间后，为何要减去500ms作为timeout时间呢？&lt;/strong&gt;（注意：这里如果&lt;code&gt;isFixedPolling()&lt;/code&gt;方法为true，timeout会是一个固定的时间间隔，默认是10000ms，也就是10s）&lt;br /&gt;&lt;br /&gt;
我们先记录这个问题，然后继续往下走，去查看&lt;code&gt;ClientLongPolling&lt;/code&gt;主要做了什么：
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-5.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-5&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
我们发现&lt;code&gt;ClientLongPolling&lt;/code&gt;主要做了这几件事：&lt;br /&gt;
（1）创建一个延迟调度任务，延迟时间为上述计算的timeout&lt;br /&gt;
（2）将该&lt;code&gt;ClientLongPolling&lt;/code&gt;添加到&lt;code&gt;allSubs&lt;/code&gt;中&lt;br /&gt;
（3）延迟时间到后，会将该&lt;code&gt;ClientLongPolling&lt;/code&gt;实例从&lt;code&gt;allSubs&lt;/code&gt;中删除（删除订阅关系）&lt;br /&gt;
（4）获取服务端中保存的对应客户端请求且未发生变更的changedGroupKeys，将其写入到reponse返回给客户端（之后客户端拿到changeGroupKeys所做的操作在&lt;a href=&quot;http://www.buildupchao.cn/technology-challenge/2019/12/26/how-to-refresh-conf-automatically-for-nacos.html#client-rt-load-config&quot;&gt;从客户端潜入Nacos实时更新配置原理&lt;/a&gt;部分已经解析）
&lt;br /&gt;&lt;br /&gt;
这里有个疑问，为什么已经有延迟执行了，还要做一下&lt;code&gt;allSubs&lt;/code&gt;添加、删除&lt;code&gt;ClientLongPolling&lt;/code&gt;实例的操作呢？看代码注释提示是&lt;strong style=&quot;color:red;&quot;&gt;删除订阅关系&lt;/strong&gt;，我们可以知道&lt;code&gt;ClientLongPolling&lt;/code&gt;是被订阅的，但是这个订阅关系指的又是什么呢？我们猜测一下，之前对客户端实时更新配置分析时，我们知道一旦配置更新，客户端能立即得到变更信息，而服务端这里却是有timeout时延的，所以，这种订阅关系是不是和配置变更有关系呢？这里仅仅是猜测，我们依然先记录这个问题，继续从代码中寻求答案。&lt;/p&gt;

&lt;h3 id=&quot;42-从更改配置操作作为切入点&quot;&gt;4.2 从更改配置操作作为切入点&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-6.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-6&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
由浏览前F12请求情况可知，更新配置，会调用&lt;code&gt;POST:/nacos/v1/cs/configs&lt;/code&gt;API，具体的方法时&lt;code&gt;ConfigController#publishConfig&lt;/code&gt;方法：
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-7.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-7&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-8.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-8&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
通过上述代码可知，修改配置后，服务端先通过&lt;code&gt;persistService.insertOrUpdate&lt;/code&gt;将配置信息进行了更新，然后调用&lt;code&gt;EventDispatcher#fireEvent&lt;/code&gt;触发一个&lt;code&gt;ConfigDataChangeEvent&lt;/code&gt;事件。接下来，我们来查看一下fireEvent方法主要做了什么:
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-9.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-9&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
由此可见，fireEvent主要是根据事件class获取listener列表（&lt;code&gt;CopyOnWriteArrayList&amp;lt;EventDispatcher.AbstractEventListener&amp;gt;&lt;/code&gt;），然后循环调用每个listener的onEvent方法。而listener是通过&lt;code&gt;EventDispatcher#addEventListener&lt;/code&gt;添加到listeners中。因此，我们只需找到调用&lt;code&gt;EventDispatcher#addEventListener&lt;/code&gt;方法的地方，即可得知需要触发哪些&lt;code&gt;AbstractEventListener&lt;/code&gt;的onEvent回调方法。
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-10.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-10&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
我们发现&lt;code&gt;AbstractEventListener&lt;/code&gt;构造方法调用了&lt;code&gt;EventDispatcher.addEventListener(this)&lt;/code&gt;方法，但是显然&lt;code&gt;AbstractEventListener&lt;/code&gt;是抽象类，应找具体的实现类，很巧，一个熟悉的身影出现在面前：&lt;code&gt;LongPollingService&lt;/code&gt;。
&lt;br /&gt;&lt;br /&gt;
所以，我们可以显而易见两条线路：&lt;br /&gt;
（1）在nacos控制台更改配置信息时 -&amp;gt; 调用&lt;code&gt;POST:/nacos/v1/cs/configs&lt;/code&gt;API  -&amp;gt; 触发&lt;code&gt;ConfigDataChangeEvent&lt;/code&gt;事件 -&amp;gt; 调用listener的onEvent方法 -&amp;gt; LongPollingService#onEvent&lt;br /&gt;
（2）在nacos控制台更改配置信息时 -&amp;gt; 调用&lt;code&gt;POST:/nacos/v1/cs/configs&lt;/code&gt;API  -&amp;gt; 触发&lt;code&gt;ConfigDataChangeEvent&lt;/code&gt;事件 -&amp;gt; 调用listener的onEvent方法 -&amp;gt; AsyncNotifyService#onEvent
&lt;br /&gt;&lt;br /&gt;
那到底哪个是我们想要的呢？还记得我们触发的事件类型吗？没错，是&lt;code&gt;ConfigDataChangeEvent&lt;/code&gt;事件，所以我们只需对比两条线路哪个是处理的该类型事件即可。
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-11.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-11&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-12.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-12&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
经过上述&lt;code&gt;LongPollingService#onEvent&lt;/code&gt;和&lt;code&gt;AsyncNotifyService#onEvent&lt;/code&gt;初步查看，基本可以确定&lt;code&gt;AsyncNotifyService&lt;/code&gt;是我们想要的，但是事实真的是如此吗？我们通过查看&lt;code&gt;AsyncNotifyService.AsyncTask#executeAsyncInvoke&lt;/code&gt;中并没有任何相关性。那么你可能会说，&lt;code&gt;LongPollingService#onEvent&lt;/code&gt;处理的是&lt;code&gt;LocalDataChangeEvent&lt;/code&gt;岂不是更不相关？
&lt;br /&gt;&lt;br /&gt;
然而答案却是&lt;code&gt;LongPollingService&lt;/code&gt;，我们不要被表象所迷惑了。为什么呢？在Nacos中有一个DumpService，它会定时把变更后的数据dump到磁盘上。DumpService在Spring启动之后，会调用init方法启动几个dump任务，然后在任务执行结束之后，会触发一个LocalDataChangeEvent 的事件。
&lt;br /&gt;&lt;br /&gt;
我们来看一下代码流转过程吧：
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-13.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-13&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-14.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-14&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-15.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-15&quot; /&gt;
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-16.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-16&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
代码流程过程大致为：&lt;code&gt;DumpService#init&lt;/code&gt; -&amp;gt; &lt;code&gt;DumpAllProcessor#process&lt;/code&gt; -&amp;gt; &lt;code&gt;ConfigService#dump&lt;/code&gt; -&amp;gt; &lt;code&gt;ConfigService#updateMd5&lt;/code&gt; -&amp;gt; &lt;code&gt;EventDispatcher.fireEvent(new LocalDataChangeEvent(groupKey))&lt;/code&gt;
&lt;br /&gt;&lt;br /&gt;
所以，我们还是要会回到&lt;code&gt;LongPollingService#onEvent&lt;/code&gt;中，其中会启动一个&lt;code&gt;DataChangeTask&lt;/code&gt;线程，其中会有一个循环迭代器从&lt;code&gt;allSubs&lt;/code&gt;里面获取&lt;code&gt;ClientLongPolling&lt;/code&gt;对象，删除订阅关系后，调用&lt;code&gt;ClientLongPolling#sendResponse&lt;/code&gt;将数据返回给客户端，这就是为什么配置信息可以实时触发更新的缘由了。
&lt;br /&gt;&lt;br /&gt;
那如果&lt;code&gt;DataChangeTask&lt;/code&gt;任务完成了数据返回客户端后，&lt;code&gt;ClientLongPolling&lt;/code&gt;中延迟任务开始执行怎么办？
&lt;br /&gt;
haha~No Problem.因为在&lt;code&gt;DataChangeTask&lt;/code&gt;调用&lt;code&gt;ClientLongPolling#sendResponse&lt;/code&gt;返回数据给客户端时，会先取消超时任务，然后再反馈数据给客户端。代码如下:
&lt;br /&gt;
&lt;img src=&quot;http://github.com/buildupchao/ImgStore/blob/master/blog/technologychallenge/nacos/deep-in-nacos-for-server-17.png?raw=true&quot; alt=&quot;deep-in-nacos-for-server-17&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;43-小结&quot;&gt;4.3 小结&lt;/h3&gt;

&lt;p&gt;到此为止，从服务端对配置中心的完整流程已经分析关闭，我们做一个小结:
&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;服务端接收到客户端发起的长轮询后，先比较缓存中的数据是否相同。
    &lt;ul&gt;
      &lt;li&gt;如果不同，直接返回；&lt;/li&gt;
      &lt;li&gt;如果相同，则通过schedule延迟29.5s后再执行比较&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;为保证服务端在29.5s内发生配置信息变更时能及时通知客户端，服务端采用了事件订阅的方式监听&lt;code&gt;LocalDataChangeEvent&lt;/code&gt;事件
    &lt;ul&gt;
      &lt;li&gt;收到&lt;code&gt;LocalDataChangeEvent&lt;/code&gt;事件，触发&lt;code&gt;DataChangeTask&lt;/code&gt;任务，遍历allSubs列队中的&lt;code&gt;ClientLongPolling&lt;/code&gt;并将数据写回给客户端。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;关于timeout时间去除500ms，这个要好好品。你品，你细品，你细细品。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5结尾&quot;&gt;5.结尾&lt;/h2&gt;

&lt;p&gt;留几个问题吧：&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;为什么Nacos采用客户端拉取服务端配置的方式，而不是采用服务端主动推送数据给客户端呢？&lt;/li&gt;
  &lt;li&gt;为何&lt;code&gt;ClientWorker&lt;/code&gt;中采用上一个&lt;code&gt;LongPollingRunnable&lt;/code&gt;线程执行完毕再通过&lt;code&gt;ScheduledExecutorService&lt;/code&gt;进行提交下一次任务的方式，既然不采用&lt;code&gt;ScheduledExecutorService&lt;/code&gt;的定时调度特性却如何创建了该类型线程池呢？&lt;/li&gt;
  &lt;li&gt;分析客户端实时获取配置信息时，&lt;code&gt;CacheData&lt;/code&gt;高频出现，可见其重要性，自己主动去阅读下其源码？&lt;/li&gt;
  &lt;li&gt;通过上述分析，我们知道只要是使用配置的场景基本都可以用Nacos来进行管理，那么Nacos有哪些适用场景呢？举几个例子？&lt;/li&gt;
  &lt;li&gt;nacos客户端和服务端设计上，都考虑到了哪些设计模式/理念呢？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;就先留这几个问题吧。&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;6资料链接&quot;&gt;6.资料链接&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Nacos官网：&lt;a href=&quot;http://nacos.io/en-us/docs/what-is-nacos.html&quot;&gt;http://nacos.io/en-us/docs/what-is-nacos.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Nacos Github: &lt;a href=&quot;http://github.com/alibaba/nacos&quot;&gt;http://github.com/alibaba/nacos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;如有疑问欢迎留言。&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Dec 2019 00:00:00 +0800</pubDate>
        <link>http://www.buildupchao.cn/technology-challenge/2019/12/26/how-to-refresh-conf-automatically-for-nacos.html</link>
        <guid isPermaLink="true">http://www.buildupchao.cn/technology-challenge/2019/12/26/how-to-refresh-conf-automatically-for-nacos.html</guid>
        
        <category>tech-talking</category>
        
        <category>technology-challenge</category>
        
        <category>Nacos</category>
        
        <category>Java</category>
        
        
        <category>technology-challenge</category>
        
      </item>
    
      <item>
        <title>三周技术挑战约定之缘起</title>
        <description>&lt;p&gt;2019年12月23日，突发奇想，相约三周时间进行技术挑战。&lt;/p&gt;

&lt;p&gt;参赛人数：两人&lt;/p&gt;

&lt;p&gt;人员名单：buildupchao &amp;amp; 另一个不能暴露身份的神秘人（后面就统一“神秘人”称之）&lt;/p&gt;

&lt;p&gt;挑战说明：在接下来三周时间内，总共6项选题，每人选两项且不交叉的极速学习方式。期间，需要形成文档，可以采用每日Github or 印象笔记 or 手记方式记录，于每周末（周日）进行一次对战，验收情况，以问倒对方为主进行查漏补缺，同时每次对战后，需要将每周文档同步录入到SegmentFault进行汇总。第三周周日晚上完结，进行终极PK，查看下是否有技术上的不一样（比如短时间快速Get到技术且消化的能力 or 技术突破等）以及习惯的养成。&lt;/p&gt;

&lt;p&gt;选题如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;选题&lt;/th&gt;
      &lt;th&gt;选择人&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;MySQL InnoDB存储引擎&lt;/td&gt;
      &lt;td&gt;神秘人&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hive进阶&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Netty in Action &amp;amp;&amp;amp; Spring Cloud Alibaba&lt;/td&gt;
      &lt;td&gt;buildupchao&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Flink官方文档 &amp;amp;&amp;amp; Action in research and development&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Kafka进阶&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Presto进阶&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;选题研究内容：&lt;/p&gt;

&lt;p&gt;要求文档内容追求原创，内容包含：“背景 -&amp;gt; 制造问题（or 寻求问题） -&amp;gt; 如何逐步渐进解决问题 -&amp;gt; 回顾总结 -&amp;gt; 问题延拓 -&amp;gt; 提供技术相关资料链接”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL InnoDB存储引擎
    &lt;ul&gt;
      &lt;li&gt;请带我们分析下InnoDB是如何实现行锁的？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hive进阶
    &lt;ul&gt;
      &lt;li&gt;MR执行流程（Hadoop1 &amp;amp;&amp;amp; Hadoop2），如果小文件很多，对此弊端是是什么？该如何优化？&lt;/li&gt;
      &lt;li&gt;Hive分区过多会怎么样？如何及时感知数据上报进行repair修分区，聊聊修分区的设计？&lt;/li&gt;
      &lt;li&gt;数据倾斜产生情况，如何进行优化？&lt;/li&gt;
      &lt;li&gt;常见HQL问题汇总以及说明&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Netty in Action &amp;amp;&amp;amp; Spring Cloud Alibaba
    &lt;ul&gt;
      &lt;li&gt;nacos自动刷新配置如何实现的&lt;/li&gt;
      &lt;li&gt;sentinel限流原理&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Flink官方文档 &amp;amp;&amp;amp; Action in research and development&lt;/li&gt;
  &lt;li&gt;Kafka进阶
    &lt;ul&gt;
      &lt;li&gt;如何保证消息不被重复消费 or 如何保证消息消费时的幂等性？&lt;/li&gt;
      &lt;li&gt;如何保证消息被可靠传输不丢失（需要考虑producer发送、kafka传输、consumer消费）？&lt;/li&gt;
      &lt;li&gt;如何保证从MQ里拿到数据按顺序执行？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Presto进阶
    &lt;ul&gt;
      &lt;li&gt;Presto的预处理原理是什么？如何让查询过一次的SQL再次重复查询而不采用预处理？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后续，每次完成一个选项，才会开启下一个选项的选择，不会一开始就展开一系列问题。希望后续能收到不错的结果。&lt;/p&gt;

&lt;p&gt;产出文章列表：&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.buildupchao.cn/technology-challenge/2019/12/23/technology-challenge-for-3-weeks.html&quot;&gt;三周技术挑战约定之缘起&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.buildupchao.cn/technology-challenge/2019/12/26/how-to-refresh-conf-automatically-for-nacos.html&quot;&gt;【技术挑战】Nacos自动刷新配置如何实现的？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.buildupchao.cn/technology-challenge/2019/12/28/traffic-limit-control-for-sentinel.html&quot;&gt;【技术挑战】Sentinel限流原理？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 23 Dec 2019 00:00:00 +0800</pubDate>
        <link>http://www.buildupchao.cn/technology-challenge/2019/12/23/technology-challenge-for-3-weeks.html</link>
        <guid isPermaLink="true">http://www.buildupchao.cn/technology-challenge/2019/12/23/technology-challenge-for-3-weeks.html</guid>
        
        <category>tech-talking</category>
        
        <category>technology-challenge</category>
        
        
        <category>technology-challenge</category>
        
      </item>
    
      <item>
        <title>阅读 | 人性的弱点</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;如果跟我们已有的成就做个比较，我们只是朦胧半醒着，我们只是利用了身心一小部分的能源。我们在极限之内，尚有更多的能源，可是习惯地不加以利用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;少一些抱怨、指责、批评，以真挚诚恳的赞美来激发别人的需求&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;保持微笑，善于倾听，让对方感到自己很重要&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 21 Dec 2019 00:00:00 +0800</pubDate>
        <link>http://www.buildupchao.cn/latestreading/2019/12/21/latestreading-how-to-win-friends-and-influence-people.html</link>
        <guid isPermaLink="true">http://www.buildupchao.cn/latestreading/2019/12/21/latestreading-how-to-win-friends-and-influence-people.html</guid>
        
        <category>latestreading</category>
        
        
        <category>latestreading</category>
        
      </item>
    
  </channel>
</rss>
